using System;
using System.IO;
using System.Xml;
using System.Xml.Schema;
using System.Collections.Generic;

namespace XmlSchemaInferenceApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Check if a folder path argument was passed
            if (args.Length != 1)
            {
                Console.WriteLine("Usage: XmlSchemaInferenceApp <folderPath>");
                return;
            }

            // Folder path from the command-line argument
            string folderPath = args[0];

            // Validate that the folder exists
            if (!Directory.Exists(folderPath))
            {
                Console.WriteLine($"The specified folder path does not exist: {folderPath}");
                return;
            }

            string outputSchemaPath = "outputSchema3.xsd";

            // Initialize XmlSchemaInference for schema inference
            XmlSchemaInference schemaInference = new XmlSchemaInference();
            XmlSchemaSet schemaSet = new XmlSchemaSet();

            // Track full element paths to handle duplicates (full paths)
            HashSet<string> elementPaths = new HashSet<string>();

            // Process each XML file in the folder
            foreach (var filePath in Directory.GetFiles(folderPath, "*.xml"))
            {
                try
                {
                    // Read each XML file using an XmlReader
                    using (XmlReader reader = XmlReader.Create(filePath))
                    {
                        // Infer the schema from the XML file
                        XmlSchemaSet inferredSchema = schemaInference.InferSchema(reader);

                        // Merge the inferred schema into the main schema set
                        foreach (XmlSchema schema in inferredSchema.Schemas())
                        {
                            // Loop through the elements in the schema and track their full paths
                            foreach (XmlSchemaElement element in schema.Elements.Values)
                            {
                                // Get the full path of the element (you may need to build this based on context)
                                string elementPath = GetElementPath(element);

                                // Only add the full path if it hasn't been seen before
                                if (!elementPaths.Contains(elementPath))
                                {
                                    elementPaths.Add(elementPath);
                                    schemaSet.Add(schema);  // Add the schema only once per unique full path
                                }
                            }
                        }
                    }
                    Console.WriteLine($"Processed {filePath}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error processing {filePath}: {ex.Message}");
                }
            }

            // Write the final schema to an output XSD file
            using (FileStream fs = new FileStream(outputSchemaPath, FileMode.Create))
            {
                foreach (XmlSchema schema in schemaSet.Schemas())
                {
                    schema.Write(fs);
                }
            }

            Console.WriteLine($"Schema saved to {outputSchemaPath}");
        }

        // Helper function to get the full path of an element (modify as needed)
        private static string GetElementPath(XmlSchemaElement element)
        {
            // For simplicity, we assume the element's path can be generated by its name.
            // This logic may need to be expanded if nested elements need to be handled properly
            return element.QualifiedName.ToString();
        }
    }
}
